# -*- coding: utf-8 -*-
"""APE - EXERCÍCIOS 11

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Plf69DifXVSmMPtSubKQgydx2NvnJc8S

**QUESTÃO 1**

Uma matriz de permutação é uma matriz quadrada cujos elementos são 0's
ou 1's, tal que em cada linha e em cada coluna exista apenas um elemento
igual a 1. Por exemplo, a matriz seguinte é uma matriz de permutação.
```
1 0 0
0 1 0
0 0 1
```
Com base na definição apresentada, escreva um programa que preencha uma
matriz quadrada com valores fornecidos pelo usuário, determine e mostre se
ela é uma matriz de permutação.
"""

n = int(input('Digite a ordem da matriz: '))

m = [[None]*n for i in range(n)]

print('Digite os elementos da matriz: ')
for i in range(n):
  for j in range(n):
   m[i][j] = int(input(f'M[{i}][{j}]: '))

print('Matriz: ')
for i in range(n):
  for j in range(n):
    print(f'{m[i][j]:4}', end=' ')
  print()



for i in range(n):
  for j in range(n):
    if i == j and m[i][j] == 1 and i != j and m[i][j] == 0:
      print('É uma matriz de permutação.')
    else:
      break
    print('Não é uma matriz de permutação.')

#PROFESSOR
#pode contar quantos 1 possui, pode somar já que o resultado tem que ser 1


#leitura da ordem da matriz:
n = int(input('Digiite a ordem da matriz: '))

#formação da matriz
m = [[None]*n for i in range(n)]

#leitura da matriz
print('Digite os elementos da matriz: ')
for i in range(n):
  for j in range(n):
   m[i][j] = int(input(f'M[{i}][{j}]: '))

#impressão da matriz
print('Matriz: ')
for i in range(n):
  for j in range(n):
    print(f'{m[i][j]:4}', end=' ')
  print()

#TESTANDO AS LINHAS
ok = True #é permutação, esse true define que a variável é verdadeira
for i in range(n):
  cont = 0 #saber quantos 1 tem na linha, te,m que ser entre os for
  for j in range(n):
    if m[i][j] == 1: #se cada elemento for igual a um
      cont += 1
  if cont != 1: #furou a quantidade de 1 é false e para
      ok = False
      break

#TESTANDO AS COLUNAS
if ok: #testar as colunas, só se as linhas forem verdadeiras
 for j in range(n):
  cont = 0 #saber quantos 1 tem na coluna, tem que ser entre os for
  for i in range(n):
    if m[i][j] == 1: #se cada elemento for igual a um
      cont += 1
    if cont != 1: #furou a quantidade de 1 é false e para
      ok = False
      break

#mostrar o resultado
if ok:
  print('É permutação.')
else:
  print('Não é permutação.')

# Leitura da ordem da matriz
n = int(input('Digite a ordem da matriz: '))

# Criação da matriz com valores nulos
m = [[None]*n for i in range(n)]

# Leitura dos elementos da matriz
print('\nDigite os elementos da matriz (0 ou 1):')
for i in range(n):
    for j in range(n):
        m[i][j] = int(input(f'm[{i}][{j}]: '))

# Exibição da matriz
print('\nMatriz:')
for i in range(n):
    for j in range(n):
        print(f'{m[i][j]:4}',end='')
    print()

# Testando as linhas
ok = True
for i in range(n):
    cont = 0
    for j in range(n):
        if m[i][j] == 1:
            cont += 1
    if cont != 1:
        ok = False
        break

# Testando as colunas
if ok:
    for j in range(n):
        cont = 0
        for i in range(n):
            if m[i][j] == 1:
                cont += 1
        if cont != 1:
            ok = False
            break

# Mostrando o resultado final
if ok:
    print('\nÉ uma matriz de permutação')
else:
    print('\nNão é uma matriz de permutação')

"""**QUESTÃO 2**

Uma matriz quadrada contendo valores inteiros é denominada quadrado
mágico quando a soma dos elementos de cada linha, a soma dos elementos
de cada coluna e a soma dos elementos das diagonais principal e secundária
são todos iguais. Por exemplo, a matriz seguinte é um quadrado mágico.
8 0 7
4 5 6
3 10 2
Escreva um programa que preencha uma matriz com valores fornecidos pelo
usuário, determine e mostre se ela é um quadrado mágico.
"""



#PROFESSOR
#o que vai adicionar aqui que diferencia da 1 são as diagonais


# Leitura da ordem da matriz
n = int(input('Digite a ordem da matriz: '))

# Criação da matriz com valores nulos
m = [[None]*n for i in range(n)]

# Leitura dos elementos da matriz
print('\nDigite os elementos da matriz:')
for i in range(n):
    for j in range(n):
        m[i][j] = int(input(f'm[{i}][{j}]: '))

# Exibição da matriz
print('\nMatriz:')
for i in range(n):
    for j in range(n):
        print(f'{m[i][j]:4}',end='')
    print()

# Inicialização da variável do resultado
quadradoM = True

# Verificando a soma da diagonal principal
diagP = 0
for i in range(n):
    diagP += m[i][i]

# Verificando a soma da diagonal secundária
diagS = 0 #tem que inicializar
for i in range(n):
    diagS += m[n-i-1][i] #quando o i for 0 dá 2, se for 1 dá 1, se for 2 dá 0; pode ser i+j = n-1
if diagS != diagP: #verificar a diferença
    quadradoM = False #tem que usar o if pq não necessariamente é o oposto

# Verificando a soma de cada linha
for i in range(n): #pode usar o if aqui do ok
    somaL = 0
    for j in range(n):
        somaL += m[i][j]
    if somaL != diagP: #se for diferente da principal já zera
        quadradoM = False

# Verificando a soma de cada coluna
for j in range(n): #lembrar de inverter os for
    somaC = 0
    for i in range(n):
        somaC += m[i][j]
    if somaC != diagP:
        quadradoM = False

# Exibição do resultado final
if quadradoM:
    print('\nÉ um quadrado mágico') #\n para pular linha
else:
    print('\nNão é um quadrado mágico')

"""**QUESTÃO 3**

Escreva um programa que preencha uma matriz quadrada de ordem 3 com
valores inteiros fornecidos pelo usuário (ou gerados aleatoriamente),
calcule e exiba:
• A soma dos elementos de cada linha;
• A soma dos elementos de cada coluna;
• A soma dos elementos da diagonal principal da matriz;
• A soma dos elementos da diagonal secundária da matriz;
• A soma de todos os elementos da matriz.
"""



#PROFESSOR

n = 3  # Ordem da matriz quadrada

# Criação da matriz
m = [[None]*n for i in range(n)]

# Leitura da matriz
'''
print('\nDigite os elementos da matriz:')
for i in range(n):
    for j in range(n):
        m[i][j] = int(input(f'M[{i}][{j}]: '))
'''

# Geração aleatória dos elementos da matriz
import random
for i in range(n):
    for j in range(n):
        m[i][j] = random.randint(1,10)

# Exibição da matriz
print('\nMatriz:')
for i in range(n):
    for j in range(n):
        print(f'{m[i][j]:4}',end='')
    print()

# Soma das linhas
print('\nSoma de cada linha:')
for i in range(n):
    s = 0 #no meio dos for
    for j in range(n):
        s += m[i][j] #soma aqui dentro
    print(f'{s:4}')

# Soma das colunas
print('\nSoma de cada coluna:')
for j in range(n):
    s = 0
    for i in range(n):
        s += m[i][j]
    print(f'{s:4}',end='')

# Soma da diagonal principal
print('\n\nSoma da diagonal principal:')
s = 0 #para pegar toda a matriz esse zero tem que tá antes
for i in range(n): #usando dois for
    for j in range(n):
        if i == j:
            s += m[i][j]
print(f'{s:4}')

# Outra forma para a soma da diagonal principal
'''
print('\n\nSoma da diagonal principal:')
s = 0
for i in range(n): #com um for só
    s += m[i][i]
print(f'{s:4}')
'''

# Soma da diagonal secundária
print('\nSoma da diagonal secundária:')
s = 0
for i in range(n):
    for j in range(n):
        if i + j == n - 1:  # outra condição possível:  i == n-j-1
            s += m[i][j]
print(f'{s:4}')

# Outra forma para a soma da diagonal secundária
'''
print('\nSoma da diagonal secundária:')
s = 0
for i in range(n):
    s += m[i][n-i-1]
print(f'{s:4}')
'''

# Soma de toda a matriz
print('\nSoma de toda a matriz:')
s = 0
for i in range(n):
    for j in range(n):
        s += m[i][j]
print(f'{s:4}')

"""**QUESTÃO 4**

Uma análise dos acidentes de trânsito está sendo realizada em Manhattan,
New York. Os cruzamentos das ruas 30 a 38 com as avenidas 1a a 10a foram
estudadas.
Faça um programa para, a partir da informação acima, processar a matriz de
acidentes resultante desse estudo.
Para cada acidente, será informado o local do cruzamento (Avenida x Rua). O
programa deverá ler um número desconhecido de acidentes (utilize qualquer
condição de parada a sua escolha).
Ao final da leitura dos dados, o programa deverá gerar e exibir a matriz de
acidentes (obs: exiba na matriz os cabeçalhos de linha e de coluna mostrando
a identificação das ruas e das avenidas)
"""



#PROFESSOR
#-->PROVA!!!!

#inicialização das variáveis
ri = 30 #rua inicial
rf = 38
ai = 1
af = 10 #avenida final
nlin = af - ai + 1 #o +1 para dar ajuste
ncol = rf - ri + 1
mat = [[0]*ncol for i in range(nlin)] #com zero pq é contador
flag = 0 #vai ser em while

#leitura e contagem dos acidentes
print('Informe o local de cada acidente')
print('Para encerrar, digite 0 para a Av.')
while True: #laço infinito
    print()
    av = int(input(f'Av. ({ai} a {af}): '))
    if av == flag: #avenida = 0
        break #já fica aqui, pq se a avenida for zero, já para
    rua = int(input(f'Rua ({ri} a {rf}): '))
    lin = av - ai #ajustar, pq o índice é diferente do valor inserido, ex é 5, mas o índice é 4
    col = rua - ri
    mat[lin][col] += 1 #ir na posição da matriz e adicionar

#exibição do cabeçalho das colunas
print('\nMAPA DOS ACIDENTES')
print('\nAv./Rua',end='')
for i in range(ncol):
    print(f'{i+ri:4}',end='') #para ir direto a distância
print()   #índice + ri

#exibição da matriz de acidentes
for i in range(nlin):
    print(f'{i+ai:4}   ',end='') #já mostrar o cabeçalho
    for j in range(ncol):
        if mat[i][j] == 0: #caso a quantidade de acidentes for 0, não tem a ver com a flag
            valor = '-'
        else:
            valor = mat[i][j]
        print(f'{valor:>4}',end='')
    print()

"""**QUESTÃO 5**

A distância entre várias cidades é dada pela tabela abaixo (em km).
```
Cidade 1 2 3 4 5
1  - 15 30  5 12
2 15  - 10 17 28
3 30 10  -  3 11
4  5 17  3  - 80
5 12 28 11 80  -
```
Faça um programa que:
• Armazene estas informações em uma matriz;
• Mostre a distância percorrida para um determinado percurso (informado
pelo usuário).
Exemplo: Dado o percurso 1, 2, 3, 2, 5, 1, 4, a distância percorrida é
15+10+10+28+12+5 = 80km.
"""



#PROFESSOR

# Inicialização da matriz
m = [[0,15,30,5,12],[15,0,10,17,28],[30,10,0,3,11],[5,17,3,0,80],[12,28,11,80,0]]
#o percurso de cada cidade para outra,

# Leitura do percurso e soma das distâncias
soma = 0 #inicia a soma antes de tudo
print('\nDigite as cidades do percurso (ou 0 para sair)')
orig = int(input()) #digitar de qual cidade sai, p/ criar o parâmetro, #a anterior sempre vira a origem e ele pega o próximo destino
while True: #laço infinito
    dest = int(input()) #a cidade de chegarda para fazer a comparação
    if dest == 0: #a flag de stop
        break #para logo
    soma += m[orig-1][dest-1] #a soma vai ser ela + a origem-1 (ajuste do índice) +o destino-1
    orig = dest #o ajuste para a próxima

# Exibição do resultado
print(f'\nDistancia percorrida: {soma} km')

"""Vetor: a questão 1 da lista complementar
Matriz: diagonal, soma de linha e coluna, a questão 3 da lista complementar
"""